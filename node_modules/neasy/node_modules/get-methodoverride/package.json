{
  "author": {
    "name": "David Dripps",
    "email": "david.dripps@gmail.com",
    "url": "http://www.daviddripps.com"
  },
  "name": "get-methodoverride",
  "description": "similar to the methodOverride in Express except it overrides GET requests as well. This is useful when creating services that interact with your API via JSONP requests",
  "version": "0.1.2",
  "homepage": "http://www.daviddripps.com/projects/node-get-method-override",
  "repository": {
    "type": "git",
    "url": "git://github.com/daviddripps/node-get-method-override.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "make"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {},
  "devDependencies": {},
  "readme": "# GET methodOverride\n\nA method override similar to express.methodOverride, but for GET requests instead of POST requests.  This is incredibly useful when building client-side widgets that must interact with your API via XHR and JSONP requests.\n\n``` bash\nnpm install get-methodoverride\n```\n\n## Usage\n\nAfter installing the NPM package we need to add it to Express.  In Express's ```app.configure``` block add ```app.use(require('get-methodoverride'));``` as seen below.\n\n``` javascript\napp.configure(function() {\n    app.use(express.bodyParser());\n    app.use(express.methodOverride());\n    \n    /* Add GET methodOverride AFTER express.methodOverride() and BEFORE app.router */\n    app.use(require('get-methodoverride'));\n    \n    app.use(app.router);\n})\n\n```\n\nNow, simply add the ```_method``` parameter to your request query as you would to the request body in the traditional methodOverride and your request will be properly routed.\n\n## Test\n\nGET methodOverride is tested and can be verified by running the following:\n\n``` bash\nmake\n```\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/daviddripps/node-get-method-override/issues"
  },
  "_id": "get-methodoverride@0.1.2",
  "_from": "get-methodoverride@0.1.2"
}
