
	var Backbone 	= require('backbone');
	var db 			= require('./lib/db.js')
	var Q 			= require('q');


	// Basic model
	var Model = Backbone.Model.extend({

		save: function () {
			var self, collection, deferred, data;

			self 		= this;
			collection 	= this.constructor.class;
			deferred 	= Q.defer();
			data 		= this.toJSON();

			db.save(collection, data, function (err, data) {
				if (err) {
					return deferred.reject(new Error(err));
				}

				deferred.resolve (data);
			});

			return deferred.promise;
		}

	});


	// Basic collection
	var Collection = Backbone.Collection.extend({

	})


	// Class methods
	Model.findById = function(id, cb) {
		var self, collection, deferred;

		self 		= this;
		collection 	= this.class;
		deferred 	= Q.defer();


		db.findById(collection, id, function(err, dbData) {
			if (err) {
				return deferred.reject(new Error(err));
			}

			if (dbData===null) {
				return deferred.reject(new Error(collection +' with id '+ id + ' not found!'));
			}

			var instance = new self(dbData);
			deferred.resolve(instance);
		});

		return deferred.promise;
	};


	Model.find = function(filter, opt) {
		var self, collection, deferred;

		self 		= this;
		collection 	= this.class;
		deferred 	= Q.defer();


		db.find(collection, filter, function(err, results) {
			var collection, instance, i;
			if (err) {
				return deferred.reject(new Error(err));
			}
			
			collection = new Collection();

			if (results.length) {
				for(i in results) {
					if (results.hasOwnProperty(i)) {
						instance = new self(results[i]);
						collection.add(instance);
					}
				}
			};

			deferred.resolve(collection);
		}, opt);

		return deferred.promise;
	};



	Model.findOne = function (filter) {
		var self, collection, deferred;

		self 		= this;
		collection 	= this.class;
		deferred 	= Q.defer();

		db.findOne(collection, filter, function(err, dbData) {
			if (err) {
				return deferred.reject(new Error(err));
			}

			if (dbData === null) {
				return deferred.resolve();
			}

			var item = new self(dbData);

			deferred.resolve(item);
		});

		return deferred.promise;
	};


	Model.findOrCreate = function(filter, data) {
		var self, collection, deferred;

		self 		= this;
		collection 	= this.class;
		deferred 	= Q.defer();

		var find = this.findOne(filter);

		find.done(function (item) {
			if (item) {
				return deferred.resolve(item);
			}

			var item = new self(data);
			item.save().done(function (data) {
				return deferred.resolve(item);
			});

			return this;
		});

		find.fail(function (err) {
			return deferred.reject(err);
		});

		return deferred.promise;
	};

	Model.class = undefined;

	module.exports = Model;
