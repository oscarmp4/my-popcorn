
    var path            = process.cwd();
    var jf              = require('jsonfile');
    var http            = require('http');
    var express         = require('express');
    var app             = express();
    var config          = jf.readFileSync(process.argv[2] || path + '/neasy.json');
    var cookieSecret    = config.cookie.secret || 'yoursuperamazincookiesecret';
    var fs              = require("fs");
    var logfmt          = require("logfmt");
    var queryParser     = require('./lib/queryParser.js');
    var ga              = require('./lib/ga.js');
    var server          = http.createServer(app);
    var db              = require('./lib/db.js')
    var sass            = require('node-sass');
    var cli             = require('cli');


    var dir             = {
        routes  : path + '/routes',
        models  : path + '/models',
        views   : path + '/views'
    };


    if (config.socket) {
        require('./lib/io').use(server);
    }



    // default express settings
    app.use(express.static(path + '/public'));  
    app.use(logfmt.requestLogger());
    app.use(express.compress());
    app.use(express.cookieParser());
    app.use(express.cookieParser(cookieSecret));
    app.use(express.cookieSession({path: '/', httpOnly: true, maxAge: null, secret: cookieSecret}));
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(require('get-methodoverride'));
    app.configure('development', function() {
        app.use(express.errorHandler({dumpExceptions:true, showStack:true}));
    });


    // custom express settings
    app.config = config;
    app.routes = fs.readdirSync(dir.routes).sort();
    app.models = fs.readdirSync(dir.models).sort();
    app.query  = queryParser(app);
    if (config.ga) {
        app.use(ga.enable(config.ga.code, config.ga.domain));
    }

    app.require = function (pkg) {
        return require(pkg);
    }

    // view settings
    app.set('view engine', 'twig');


    app.start = function () {
        var i;

        // Automatice param/query to model conversion
        for (i in app.models) {
            if (app.models.hasOwnProperty(i)) {

                var model = require(dir.models + '/' + app.models[i]);

                (function (model) {
                    var name = model.class;

                    // Enable query definitions
                    app.query(name, function(req, res, next, id) {
                        
                        model.findById(id, function(err, instance){
                            if (err) return next();

                            req.query[name] = instance;
                            next();
                        });
                    });

                    // Enable param definitions
                    app.param(name, function(req, res, next, id) {

                        model.findById(id, function(err, instance){
                            if (err) return next();

                            req.param[name] = instance;
                            next();
                        });
                    });


                })(model);
            }
        }

        // Load the routes
        for (i in app.routes) {
            if (typeof app.routes[i] == 'string') {
                var filename = app.routes[i];
                if (filename.substr(filename.lastIndexOf('.')) != '.js') continue;


                cli.info("Loading route: " + filename);
                require(dir.routes + '/' + filename);
            }
        };


        var css = sass.renderSync({
            file: path + '/sass/app.scss',
            outputStyle: 'compressed'
        });

        try {
            fs.writeFileSync(path + '/public/assets/dev/css/app.css', css);
            cli.ok("app.css compiled!")
        } catch (e) {
            cli.error("app.css error!")
            return false;
        }


        // Start the web server
        var port = Number(process.env.PORT || config.server.port || 3000);

        db.open(function () {
            server.listen(port, function () {
                cli.ok('App running in http://' + config.server.domain + ':' + port);
                cli.spinner('Running');
            });
        })
    };


    module.exports = app;